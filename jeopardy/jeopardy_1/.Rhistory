confint(cat.model)
hist(cats$Bwt)
hist(cats$Hwt)
?hist
?curve
curve(dnorm)
curve(dnorm, mean=mean(cats$Bwt), sd=sd(cats$Bwt))
curve(dnorm, mean=mean(cats$Bwt), sd=sd(cats$Bwt), add=T)
warnings()
curve(dnorm, add=T)
curve(dnorm(cats$Bwt, mean=mean(cats$Bwt), sd=sd(cats$Bwt), add=T))
curve(dnorm, (cats$Bwt, mean=mean(cats$Bwt), sd=sd(cats$Bwt), add=T))
curve(dnorm(cats$Bwt, mean=mean(cats$Bwt), sd=sd(cats$Bwt), add=T))
curve(dnorm(x, mean=mean(cats$Bwt), sd=sd(cats$Bwt), add=T))
curve(dnorm(x, mean=mean(cats$Bwt), sd=sd(cats$Bwt)), add=T)
curve(dnorm(x, mean=mean(cats$Bwt), sd=sd(cats$Bwt)), add=T, lwd=2)
density(cats$Bwt)
plot(density(cats$Bwt))
curve(dnorm(x, mean=mean(cats$Bwt), sd=sd(cats$Bwt)), add=T, lwd=2)
hist(cats$Hwt)
curve(dnorm(x, mean=mean(cats$Hwt), sd=sd(cats$Hwt)), add=T)
plot(density(cats$Hwt)))
curve(dnorm(x, mean=mean(cats$Hwt), sd=sd(cats$Hwt)), add=T)
plot(density(cats$Hwt))
curve(dnorm(x, mean=mean(cats$Hwt), sd=sd(cats$Hwt)), add=T)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
model = lm(dist ~ speed, data = cars) #Use the linear model function lm() to
#conduct the simple linear regression.
summary(model) #All the summary information for the model in question. Reports:
#-The five number summary of the residuals.
#-The coefficient estimates.
#-The coeffiient standard errors.
#-The t-test for significance of the coefficient estimates.
#-The p-values for the significance tests.
#-The level of significance.
#-The RSE and degrees of freedom for the model.
#-The coefficient of determination, R^2.
#-The overall model F-statistic and corresponding p-value.
#The equation of the model can be constructed from the output:
#Predicted Distance = -17.6 + (3.9)*Speed
#The interpretation for the slope coefficient: With a 1 MPH increase in car speed,
#the stopping distance, on average, increases by approximately 3.9 feet.
#The interpretation for the intercept coefficient: When a car's speed is 0 MPH,
#the stopping distance, on average, is -17.6 MPH. Theoretically, does this make
#sense? Why might this be the case?
#The residual standard error is about 15.38; this is an approximation of how much
#the residuas tend to deviate around the regression line.
#The coefficient of determination is about 0.65; approximately 65% of the variability
#in the distance variable is explained by the speed variable.
#The intercept, slope, and overall regression is extremely significant (p-values
#all below 0.05).
#Notice that the F-statistic value for the overall regression is the same as the
#square of the t-statistic value for the speed coefficient:
t.statistic = 9.464
f.statistic = 89.57
t.statistic^2
confint(model) #Creating 95% confidence intervals for the model coefficients.
plot(cars, xlab = "Speed in MPH", ylab = "Distance in Feet",
main = "Scatterplot of Cars Dataset")
abline(model, lty = 2)
plot(model$fitted, model$residuals,
xlab = "Fitted Values", ylab = "Residual Values",
main = "Residual Plot for Cars Dataset")
abline(h = 0, lty = 2)
qqnorm(model$residuals)
qqline(model$residuals)
summary(cat.model)
plot(cat.model$fitted.values, cat.model$residuals)
abline(h=0)
plot(cats$Bwt, cats$Hwt)
abline(b0, b1)
boxCox(cat.model)
library(car)
boxCox(cat.model)
predict(cat.model, interval="confidence")
predict(cat.model, interval="confidence", interval="prediction")
lines(predict(cat.model, interval="confidence"))[,2:3]
lines(predict(cat.model, interval="confidence"))[,2]
predict(cat.model, interval="confidence")
lines(predict(cat.model, interval="confidence")[2])
lines(predict(cat.model, interval="confidence")[,2])
lines(predict(cat.model, interval="confidence")[,3])
plot(cats$Bwt, cats$Hwt)
abline(b0, b1)
lines(predict(cat.model$fitted.values, interval="confidence")[,2], col="red")
?predict
summary(cat.model)
lines(cats$Hwt(predict(cat.model, interval="confidence")[,2], col="red"))
lines(cats$Hwt, predict(cat.model, interval="confidence")[,2], col="red")
lines(cats$Hwt, predict(cat.model, interval="confidence")[,3], col="red")
lines(cats, predict(cat.model, interval="confidence")[,2], col="red")
lines(cats, predict(cat.model, interval="confidence")[,3], col="red")
predict(cat.model, interval="confidence")[,2]
predict(cat.model, interval="confidence")[,3]
lines(cats$Hwt, predict(cat.model$fitted.values, interval="confidence")[,2], col="red")
lines(cats$Hwt, predict(cat.model$fitted.values, interval="confidence")[,3], col="red")
cat.model$fitted.values
lines(cats$Hwt, predict(cat.model, cats, interval="confidence")[,2], col="red")
lines(cats$Hwt, predict(cat.model, cats, interval="confidence")[,3], col="red")
lines(cats$Bwt, predict(cat.model, cats, interval="confidence")[,2], col="red")
lines(cats$Bwt, predict(cat.model, cats, interval="confidence")[,3], col="red")
plot(cats$Bwt, cats$Hwt)
abline(b0, b1)
lines(cats$Bwt, predict(cat.model, cats, interval="confidence")[,2], col="red")
lines(cats$Bwt, predict(cat.model, cats, interval="confidence")[,3], col="red")
lines(cats$Bwt, predict(cat.model, cats, interval="prediction")[,2], col="blue")
lines(cats$Bwt, predict(cat.model, cats, interval="prediction")[,3], col="blue")
boxCox(cat.model)
lambda = box.cat$x[which(box.cat$y == max(box.cat$y))]
box.cat<-boxCox(cat.model)#Answer 2.1
lambda = box.cat$x[which(box.cat$y == max(box.cat$y))]
cats2<-cats
cats2$Hwt<-log(cats2$Hwt)
cat.model.2<-lm(cats2$Hwt ~ cats2$Bwt)
plot(cat.model.2)
plot(cat.model.2)
qqnorm(cat.model)
qqnorm(cat.model$residuals)
qqline(cat.model$residuals)
plot(cats2$Bwt, cats2$Hwt)
cat.model$coefficients
abline(cat.model.2$coefficients)
summary(cat.model.2)
summary(cat.model)
plot(density(cats2$Bwt))
curve(dnorm(x, mean=mean(cats2$Bwt), sd=sd(cats2$Bwt)), add=T)
plot(density(cats2$Hwt))
curve(dnorm(x, mean=mean(cats2$Hwt), sd=sd(cats2$Hwt)), add=T)
plot(cat.model.2$fitted.values, cat.model.2$residuals)
abline(h=0)
qqnorm(cat.model.2$residuals)
qqline(cat.model.2$residuals)
box.cat<-boxCox(box.cat)
box.cat<-boxCox(cat.model.2)
cats3<-cats2
lambda = cat.model.2$x[which(cat.model.2$y == max(cat.model.2$y))]
lambda
box.cat<-boxCox(cat.model)
box.cat2<-boxCox(cat.model.2)
lambda = box.cat2$x[which(box.cat2$y == max(box.cat2$y))]
cats3$Hwt<-(cats2$Hwt^lambda - 1)/lambda
cat.model.3<-lm(cats3$Hwt ~ cats3$Bwt)
plot(cat.model.3)
plot(cats3$Bwt, cats3$Hwt)
abline(cat.model.3$coefficients)
summary(cat.model.3)
summary(cat.model.2)
summary(cat.model)
plot(density(cats3$Bwt))
curve(dnorm(x, mean=mean(cats3$Bwt), sd=sd(cats3$Bwt)), add=T)
plot(density(cats2$Hwt))
curve(dnorm(x, mean=mean(cats2$Hwt), sd=sd(cats2$Hwt)), add=T)
plot(cat.model.2$fitted.values, cat.model.2$residuals)
abline(h=0)
qqnorm(cat.model.2$residuals)
qqline(cat.model.2$residuals)
plot(density(cats2$Hwt))
curve(dnorm(x, mean=mean(cats2$Hwt), sd=sd(cats2$Hwt)), add=T)
setwd("~/NYCDSA/Project 2/score")
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
View(jeop_score)
?refcols
?setdiff
Jeop_ref<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", Final")]
Jeop_ref<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", Final")]
)
)
]
c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", Final")
c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")
Jeop_ref<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
View(Jeop_ref)
head(jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)))
library(dplyr)
head(jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)))
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
head(jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)))
head(jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant))
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final))
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(Final==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
jeop_score %>% group_by(Episode) %>% summarize(Number = n()) %>% filter(Number!=3)
jeop_score %>% group_by(Date) %>% summarize(Number = n()) %>% filter(Number!=3)
filter(jeop_score, Date=="Friday, August 1, 2014")
jeop_score %>% group_by(Date) %>% summarize(Number = n()) %>% filter(Number!=3) %>% summarize(n())
(16168-16)/3
jeop_score %>% filter(Contestant=="Alan Koolik")
16168-9
16159/3
len(dj.leader$Contestant %in% winners$Contestant)
length(dj.leader$Contestant %in% winners$Contestant)
win.dj<-full_join(dj.leader, winners, by= "Episode")
View(win.dj)
win.dj %>% filter(Contestant.x==Contestant.y)
length(win.dj %>% filter(Contestant.x==Contestant.y))
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y))
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
View(same.dj.win)
diff.dj.win<-win.dj %>% filter(Contestant.x!=Contestant.y)
View(diff.dj.win)
View(winners)
View(jeop_score)
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
View(winners)
jeop_score %>% group_by(Episode) %>% filter(Final==max(Final))
max(jeop_score$Final)[,1:3]
max(jeop_score$Final)[1:3]
class(jeop_score$Final)
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
eop_score$ScoreSecond<-as.numeric(jeop_score$Final)
jeop_score$ScoreSecond<-as.numeric(jeop_score$Final)
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$ScoreSecond<-as.numeric(jeop_score$Final)
sum(is.na(jeop_score$Final))
jeop_score$Final[is.na(jeop_score$Final)]
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
win.dj<-full_join(dj.leader, winners, by= "Episode")
View(winners)
View(jeop_score)
class(jeop_score$Final)
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
class(jeop_score$Final)
sum(is.na(jeop_score$Final))
jeop_score$Final[is.na(jeop_score$Final)]
jeop_score[is.na(jeop_score$Final)]
jeop_score[is.na(jeop_score$Final),]
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
win.dj<-full_join(dj.leader, winners, by= "Episode")
View(winners)
View(win.dj)
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
diff.dj.win<-win.dj %>% filter(Contestant.x!=Contestant.y)
length(same.dj.win)/length(jeop_score)
nrow(same.dj.win)/nrow(jeop_score)
nrow(same.dj.win)/nrow(winners)
j.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreFirst==max(ScoreFirst)) %>% select(Episode, Contestant, ScoreFirst)
win.j<-full_join(j.leader, winners, by= "Episode")
same.j.win<-win.j %>% filter(Contestant.x==Contestant.y)
View(same.j.win)
View(win.j)
nrow(same.dj.win)/5384
nrow(same.dj.win)/5400
nrow(same.j.win)/nrow(winners)
jeop_score %>% mutate(Wager = Final - ScoreSecond)
jeop_score = jeop_score %>% mutate(Wager = abs(Final - ScoreSecond))
View(jeop_score)
jeop_score$Date<-as.Date(jeop_score$Date)
View(jeop_score)
strsplit(jeop_score$Date[1])
strsplit(jeop_score$Date[1], split=" ")
paste(strsplit(jeop_score$Date[1], split=" ")[2], strsplit(jeop_score$Date[1], split=" ")[3])
strsplit(jeop_score$Date[1], split=" ")[1]
class(strsplit(jeop_score$Date[1], split=" "))
paste(strsplit(jeop_score$Date[1], split=" ")[[2]], strsplit(jeop_score$Date[1], split=" ")[[3]])
strsplit(jeop_score$Date[1], split=" ")[[1]]
strsplit(jeop_score$Date[1], split=" ")[[1]][1]
jeop_score$Date<-paste(unlist(strsplit(jeop_score$Date[1], split=" "))[2], unlist(strsplit(jeop_score$Date[1], split=" "))[3])
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
jeop_score$Date<-paste(unlist(strsplit(jeop_score$Date, split=" "))[2], unlist(strsplit(jeop_score$Date, split=" "))[3])
View(jeop_score)
paste(unlist(strsplit(jeop_score$Date[1], split=" "))[2], unlist(strsplit(jeop_score$Date[1], split=" "))[3])
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
paste(unlist(strsplit(jeop_score$Date[1], split=" "))[2], unlist(strsplit(jeop_score$Date[1], split=" "))[3], unlist(strsplit(jeop_score$Date[1], split=" "))[4])
jeop_score$Date<-paste(unlist(strsplit(jeop_score$Date, split=" "))[2], unlist(strsplit(jeop_score$Date, split=" "))[3], unlist(strsplit(jeop_score$Date, split=" "))[4])
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
for (i in nrow(jeop_score)){
jeop_score$Date[i]<-  paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
}
View(jeop_score)
jeop_score$Date<-for (i in nrow(jeop_score)){
jeop_score$Date[i]<-  paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
return (jeop_score$Date)
}
View(jeop_score)
jeop_score$Date<-for (i in nrow(jeop_score)){
jeop_score$Date[i]<-paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
}
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
for (i in nrow(jeop_score)){
jeop_score$Date[i]<-paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
}
head(paste(unlist(strsplit(jeop_score$Date, split=" "))[2], unlist(strsplit(jeop_score$Date, split=" "))[3], unlist(strsplit(jeop_score$Date, split=" "))[4]))
paste(unlist(strsplit(jeop_score$Date[2], split=" "))[2], unlist(strsplit(jeop_score$Date[2], split=" "))[3], unlist(strsplit(jeop_score$Date[2], split=" "))[4])
paste(unlist(strsplit(jeop_score$Date[6], split=" "))[2], unlist(strsplit(jeop_score$Date[6], split=" "))[3], unlist(strsplit(jeop_score$Date[6], split=" "))[4])
for (i in nrow(jeop_score)){
jeop_score$Date[i]<-paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
}
View(jeop_score)
jeop_score$Date[4]<-paste(unlist(strsplit(jeop_score$Date[4], split=" "))[2], unlist(strsplit(jeop_score$Date[4], split=" "))[3], unlist(strsplit(jeop_score$Date[4], split=" "))[4])
}
jeop_score$Date[4]<-paste(unlist(strsplit(jeop_score$Date[4], split=" "))[2], unlist(strsplit(jeop_score$Date[4], split=" "))[3], unlist(strsplit(jeop_score$Date[4], split=" "))[4])
jeop_score$Date[3]<-paste(unlist(strsplit(jeop_score$Date[3], split=" "))[2], unlist(strsplit(jeop_score$Date[3], split=" "))[3], unlist(strsplit(jeop_score$Date[3], split=" "))[4])
strsplit(jeop_score$Date[4], split=" ")
strsplit(jeop_score$Date[6], split=" ")
strsplit(jeop_score$Date[6], split=" ")[1]
strsplit(jeop_score$Date[6], split=" ")[[1]]
strsplit(jeop_score$Date[6], split=" ")[[1]][2]
strsplit(jeop_score$Date[6], split=" ")[[1]][3]
strsplit(jeop_score$Date[6], split=" ")[[1]][4]
jeop_score$Date[6]<-paste(unlist(strsplit(jeop_score$Date[6], split=" "))[2], unlist(strsplit(jeop_score$Date[6], split=" "))[3], unlist(strsplit(jeop_score$Date[6], split=" "))[4])
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
for (i in nrow(jeop_score)){
jeop_score$Date[i]<-paste(unlist(strsplit(jeop_score$Date[i], split=" "))[2], unlist(strsplit(jeop_score$Date[i], split=" "))[3], unlist(strsplit(jeop_score$Date[i], split=" "))[4])
}
?gsub
gsub("*day,", "", jeop_score$Date)
gsub("*day,", "", jeop_score$Date, perl=T)
gsub("*day,", "", jeop_score$Date)
gsub(".*day,", "", jeop_score$Date)
gsub(".*day, ", "", jeop_score$Date)
jeop_score$Date<-gsub(".*day, ", "", jeop_score$Date)
jeop_score$Date<-as.Date(jeop_score$Date)
?as.Date
jeop_score$Date<-as.Date(jeop_score$Date, "%m%d%y")
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
jeop_score$Date<-gsub(".*day, ", "", jeop_score$Date)
as.Date(jeop_score$Date, "%m/%d/%y")
as.Date(jeop_score$Date, "%B/%d/%y")
as.Date(jeop_score$Date, "%B/%d/%Y")
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
as.Date(jeop_score$Date, "%A %B %d, %Y")
as.Date(jeop_score$Date, "%A/%B/%d/%Y")
as.Date(jeop_score$Date, "%A/%b/%d/%Y")
jeop_score$Date<-gsub(".*day, ", "", jeop_score$Date)
as.Date(jeop_score$Date, "%b/%d/%Y")
as.Date("June 19, 2005", "%B %d, %Y")
as.Date(jeop_score$Date, "%B %d, %Y")
jeop_score = jeop_score %>% mutate(Wager = abs(Final - ScoreSecond))
#What percentage of Double Jeopardy Leaders win the game?
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
j.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreFirst==max(ScoreFirst)) %>% select(Episode, Contestant, ScoreFirst)
win.dj<-full_join(dj.leader, winners, by= "Episode")
win.j<-full_join(j.leader, winners, by= "Episode")
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
same.j.win<-win.j %>% filter(Contestant.x==Contestant.y)
nrow(same.dj.win)/(jeop_score/3)
nrow(same.j.win)/(jeop_score/3)
plot(winners$Date, winners$Final)
View(winners)
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Date, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
j.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreFirst==max(ScoreFirst)) %>% select(Episode, Contestant, ScoreFirst)
win.dj<-full_join(dj.leader, winners, by= "Episode")
win.j<-full_join(j.leader, winners, by= "Episode")
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
same.j.win<-win.j %>% filter(Contestant.x==Contestant.y)
plot(winners$Date, winners$Final)
winners$Date[is.na(winners$Date)]<-0
plot(winners$Date, winners$Final)
sum(is.na(winners$Date))
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
jeop_score$Date<-gsub(".*day, ", "", jeop_score$Date)
jeop_score<-as.Date(jeop_score$Date, "%B %d, %Y")
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Date, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
j.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreFirst==max(ScoreFirst)) %>% select(Episode, Contestant, ScoreFirst)
win.dj<-full_join(dj.leader, winners, by= "Episode")
win.j<-full_join(j.leader, winners, by= "Episode")
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
same.j.win<-win.j %>% filter(Contestant.x==Contestant.y)
View(winners)
jeop_score<-read.csv("Jeopardy_score.csv", stringsAsFactors = F)
jeop_score<-jeop_score[, c("Episode", "Date", "Contestant", "ScoreFirst", "ScoreSecond", "FinalCat", "FinalQ", "FinalA", "FinalCorrect", "Final")]
jeop_score$ScoreFirst<-as.numeric(jeop_score$ScoreFirst)
jeop_score$ScoreSecond<-as.numeric(jeop_score$ScoreSecond)
jeop_score$Final<-as.numeric(jeop_score$Final)
jeop_score$Date<-gsub(".*day, ", "", jeop_score$Date)
jeop_score$Date<-as.Date(jeop_score$Date, "%B %d, %Y")
jeop_score = jeop_score %>% mutate(Wager = abs(Final - ScoreSecond))
#What percentage of Double Jeopardy Leaders win the game?
winners<-jeop_score %>% group_by(Episode) %>% filter(Final==max(Final)) %>% select(Episode, Date, Contestant, Final)
dj.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreSecond==max(ScoreSecond)) %>% select(Episode, Contestant, ScoreSecond)
j.leader<-jeop_score %>% group_by(Episode) %>% filter(ScoreFirst==max(ScoreFirst)) %>% select(Episode, Contestant, ScoreFirst)
win.dj<-full_join(dj.leader, winners, by= "Episode")
win.j<-full_join(j.leader, winners, by= "Episode")
same.dj.win<-win.dj %>% filter(Contestant.x==Contestant.y)
same.j.win<-win.j %>% filter(Contestant.x==Contestant.y)
plot(winners$Date, winners$Final)
winners %>% group_by(Contestant) %>% summarize(sum(Final), decreasing = T)
winners %>% group_by(Contestant) %>% summarize(Total = sum(Final)) %>% order(Total, decreasing=T)
winnings<-winners %>% group_by(Contestant) %>% summarize(Total = sum(Final))
winnings<-winners %>% group_by(Contestant) %>% summarize(Total = sum(Final), Start = min(Date))
winnings[order(Total, decreasing=T), ]
winnings[order(winnings$Total, decreasing=T), ]
winnings<-winnings[order(winnings$Total, decreasing=T), ]
plot(winnings$Date, winnings$Total)
plot(winnings$Start, winnings$Total)
answers<-jeop_score %>% group_by(FinalA) %>% summarize(n())
answers[order(answers$n(), decreasing=T)]
answers<-jeop_score %>% group_by(FinalA) %>% summarize(Total = n())
answers[order(answers$Total, decreasing=T),]
View(answers)
answers<-jeop_score %>% group_by(FinalA) %>% summarize(Total = n()/3)
answers<-answers[order(answers$Total, decreasing=T),]
winners1<-filter(winners, Date>=2001-11-26)
winners2<-filter(winners, Date<2001-11-26)
mean(winners1$Final)
mean(winners2$Final)
mean(winners1$Final)
mean(winners2$Final, na.rm=T)
?date
as.numeric(2001-11-26)
winners1<-filter(winners, Date >= as.numeric(2001-11-26))
winners2<-filter(winners, Date < as.numeric(2001-11-26))
View(winners2)
View(winners)
winners1<-filter(winners, as.numeric(Date) >= as.numeric(2001-11-26))
winners2<-filter(winners, as.numeric(Date) < as.numeric(2001-11-26))
View(winners2)
as.numeric(winners$Date[1003])
as.numeric(winners$Date[1277])
as.numeric(2001-11-26)
winners1<-filter(winners, Date >= as.Date(2001-11-26))
winners2<-filter(winners, Date < as.Date(2001-11-26))
?dplyr::filter
winners1<-filter(winners, Date >= as.Date(2001-11-26, origin="1970-01-01"))
winners2<-filter(winners, Date < as.Date(2001-11-26, origin="1970-01-01"))
View(winners2)
as.Date(2001-11-26, origin="1970-01-01"
)
as.Date(2001-11-26, origin="1970-01-01")
as.numeric(as.Date("November 26, 2001", "%B %d, %Y"))
winners1<-filter(winners, Date >= as.Date("November 26, 2001", "%B %d, %Y"))
winners2<-filter(winners, Date < as.Date("November 26, 2001", "%B %d, %Y"))
mean(winners1$Final)
mean(winners2$Final)
hist(winners$Final)
hist(winners1$Final)
hist(winners2$Final)
hist(winners2$Final, bin=20)
?hist
hist(winners2$Final, breaks=20)
hist(winners1$Final, breaks=20)
categories<-jeop_score %>% group_by(FinalCat) %>% summarize(Total = n()/3)
categories<-categories[order(categories$Total, decreasing=T),]
View(categories)
answers<-ceiling(answers[order(answers$Total, decreasing=T),])
categories<-jeop_score %>% group_by(FinalCat) %>% summarize(Total = ceiling(n()/3))
categories<-categories[order(categories$Total, decreasing=T),]
filter(winners, Final==min(Final))
min(winners$Final)
winners[winners$Final==min(winners$Final)]
winners[winners$Final==min(winners$Final),]
filter(winners[winners$Final>0, ], Final==min(Final))
real.winners <- winners[winners$Final>0, ]
filter(real.winners, Final==min(Final))
filter(winners, Final==min(Final))
View(real.winners)
min(real.winners$Final)
filter(real.winners, Final==min(Final))
real.winners[real.winners$Final==min(real.winners$Final),]
jeop_qs<-read.csv("Jeopardy.csv", stringsAsFactors=F)
setwd("~/NYCDSA/Project 2/jeopardy_1")
jeop_qs<-read.csv("Jeopardy.csv", stringsAsFactors=F)
colnames(jeop_qs)
jeop_qs<-jeop_qs[, c("Episode", "Date", "Round", "Order", "Category", "Value", "Clue", "Answer", "Right", "Wrong1", "Wrong2", "Wrong3", "Wrong4", "DailyDouble")]
View(jeop_qs)
save.image("~/NYCDSA/Project 2/Jeopardy.RData")
head(jeop_qs[jeop_qs$Clue=="Not asked"],)
head(jeop_qs[jeop_qs$Clue=="Not asked",])
length(jeop_qs[jeop_qs$Clue=="Not asked",])
jeop_qs[jeop_qs$Clue=="Not asked",]
nrow(jeop_qs[jeop_qs$Clue=="Not asked",])
nrow(jeop_qs[jeop_qs$Clue=="Not asked",])/nrow(jeop_qs)
