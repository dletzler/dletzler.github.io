x<- rnorm(1000)
x<- rnorm(10000)
sample(x, 100, replace = F)
y<-sample(x, 100, replace = F)
mean(x)-mean(y)
x_2[!=max(x_2)]
x_2[x2!=max(x_2)]
x_2[x2!=max(x_2) & x_2!=min(x_2)]
m1<-matrix(1:6, nrow=2, ncol=3)
m1
m2<-matrix(7:18, nrow=4, ncol=3)
m2
rbind(m1, m2)
species<-c("dog", "cat", "dog")
weight<-c(20, 10, 40)
Pet = data.frame(species=species, weight=weight)
Pet
Pet = data.frame(species=c("dog", "cat", "dog"), weight=c(20, 10, 40))
Pet
Pet[species=="dog"]
Pet[["dog",]]
Pet["dog",]
Pet[Pet[, 1]=="dog"]
Pet[Pet[, 2]=="dog"]
Pet[which(species=="dog")]
Pet[ , "dog"]
Pet[(1,3) , ]
Pet[c(1,3) , ]
which(Pet[1,]=="dog")
Pet
which(Pet[1:3,]=="dog")
Pet[which(Pet[1:3,]=="dog")]
Pet[which(Pet[1:3,]=="dog"), ]
?sory
?sort
sort_iris<-sort(iris$Sepal.Length, decreasing=T)
sort_iris[1:15]
sort_iris<-iris[order(iris$Sepal.Length)]
sort_iris<-iris[order(iris$Sepal.Length),]
head(sort_iris)
sort_iris<-iris[order(iris$Sepal.Length, decreassing=T),]
sort_iris<-iris[order(iris$Sepal.Length, decreasing=T),]
head(sort_iris)
Pet<-list(c('dog', 'cat', 'dog'), c(20,10,40))
Pet
Pet<-list(c('dog', 'cat', 'dog'), c(20,10,40), names("species", "weight"))
Pet<-list(Species=c('dog', 'cat', 'dog'), Weight=c(20,10,40))
Pet
Pet<-list(Species=c('dog', 'cat', 'dog'), Weight=c(20,10,40))
names(Pet)
Pet<-list(species=c('dog', 'cat', 'dog'), Weight=c(20,10,40))
Pet$Weight
c(20, 10, 40)
names(Pet)
Pet<-list(species=c('dog', 'cat', 'dog'), weight=c(20,10,40))
mean(Pet$weight)
Pet$weight + 2
mean(Pet$weight + 2)
mean((Pet$weight + 2)
)
Pet$weght<-Pet$weight+2
Pet<-list(species=c('dog', 'cat', 'dog'), weight=c(20,10,40))
Pet$weight<-Pet$weight +2
Pet
library(ggplot2)
plot(iris$Sepal.Width, iris$Sepal.Length)
plot(mpg$displ, mpg$hwy)
plot(mpg$displ, mpg$hwy, pch=20)
plot(mpg$displ, mpg$hwy, pch=20, xlab = "Engine Displacement", ylab="Highway MPG")
g<- ggplot(data = mpg, aes(x=displ, y = hwy))
g + geom_point()
g + geom_point() + geom_smoth(method = "lm")
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_line()
g + geom_point() + geom_smooth(method = "lm")
g + geom_point() + geom_smooth(method = "method")
g + geom_point() + geom_smooth(method = "lm")
data(cars)
p <- ggplot(data = cars, aes(x=speed, y=dist))
p + geom_point()
p + geom_point(color=class)
g + geom(point(aes(color = class)))
g + geom_point(aes(color = class)))
g + geom_point(aes(color = class))
g + geom_point(aes(size = class))
g + geom_point(aes(shape = class))
g + geom_point(aes(color = city))
g + geom_point(aes(color = cty))
p + geom(aes(color=class)) + facet_grid(.~cyl)
p + geom_point(aes(color=class)) + facet_grid(.~cyl)
p + geom_point() + facet_grid(.~cyl)
g + geom_point() + facet_gird(~.cyl)
g + geom_point() + facet_grid(~.cyl)
g + geom_point() + facet_grid(.~cyl)
g + geom_point() + facet_grid(drv~.)
g + geom_point() + facet_grid(drv~cyl)
g + geom_point() + facet_wrap(.~class)
g + geom_point() + facet_wrap(~class)
g + geom_point() + geom_smooth(se = FALSE)
geom_boxplot() + g
ggplot(data = mpg, aes(x=class, y=hwy)) + geom_boxplot()
ggplot(data = mpg, aes(x= reorder(class, hwy), y=hwy)) + geom_boxplot()
ggplot(data = mpg, aes(x= reorder(class, hwy, FUN=median), y=hwy)) + geom_boxplot()
?ggplot
p + geom_point() + labs(xlab = "Speed (mph)", ylab = "Stopping Distance (ft)", ggtitle="Scatterplot of Speed/Distance"))
p + geom_point() + labs(xlab = "Speed (mph)", ylab = "Stopping Distance (ft)", ggtitle="Scatterplot of Speed/Distance")
p + geom_point() + labs(x = "Speed (mph)", y = "Stopping Distance (ft)", title="Scatterplot of Speed/Distance")
p + geom_point(col = "red", pch=17) + labs(x = "Speed (mph)", y = "Stopping Distance (ft)", title="Scatterplot of Speed/Distance")
p1 <- ggplot(data = cars, aes(x=speed, y=dist))
p = p1 + geom_point(col = "red", pch=17)
p
data(diamonds)
str(diamonds)
d <- ggplot(data = diamonds, aes(x = cut, y =count))
d+ geom_bar()
d <- ggplot(data = diamonds, aes(x = cut))
d + geom_bar(aes(fill =cut))
d + geom_bar(aes(color =cut))
d + geom_bar(aes(fill =cut))
ggplot(data = diamonds, aes(x =color)) + geom_bar(aes(fill =cut))
ggplot(data = diamonds, aes(x =color)) + geom_bar(aes(fill =cut), position = "fill")
ggplot(data=diamonds, aes(x=color)) + geom_bar(aes(fill = cut), position = "dodge")
ggplot(data = mpg, aes(x = cty, y =hwy))+ geom_point(position = "jitter")
ggplot(data = mpg, aes(x = cty, y =hwy))+ geom_jitter
ggplot(data = mpg, aes(x = cty, y =hwy)) + geom_jitter()
?ggplot2:diamonds
?ggplot2::diamonds
diamonds_best = filter(diamonds, color = "D", clarity = "IF")
library(dplyr)
diamonds_best = filter(diamonds, color = "D", clarity = "IF")
library(dplyr)
diamonds_best = filter(diamonds, color == "D", clarity == "IF")
diamonds_price = mutate(diamonds_best, avg_price = price/carat)
select(diamonds_price, carat, price, avg_rice
select(diamonds_price, carat, price, avg_price)
diamonds_price = diamonds_best %>% group_by(cut) %>% mutate(avg_price = price/carat)
select(diamonds_price, carat, price, avg_price)
diamonds_price = diamonds_best %>% group_by(cut) %>%  mutate(avg_price = summarize(price/carat))
diamonds_price = diamonds_best %>% group_by(cut) %>%  mutate(avg_price = summarize(diamonds_best, price/carat))
diamonds_price = diamonds_best %>% group_by(cut) %>%  summarize(diamonds_best, price/carat)
diamonds_price = diamonds_best %>% group_by(cut) %>%  summarize(price/carat)
diamonds_price
select(diamonds_price, price, carat, avg_price)
diamonds_price = diamonds_best %>% group_by(cut) %>%  summarize(avg_price=price/carat)
diamonds_best = filter(diamonds, color == "D", clarity == "IF")
diamonds_price = diamonds_best %>% group_by(cut) %>%  summarize(avg_price = price/carat)
diamonds_price = diamonds_best %>% group_by(cut) %>%  mutate(avg_price = price/carat)
select(diamonds_price, cut, avg_price)
diamonds_price = group_by(cut)
diamonds_price = group_by(diamonds_best, cut)
mutate(diamonds_price, avg_price = price/carat)
summarize(diamonds_price, mean(avg_price))
diamonds_price = group_by(diamonds_best, cut)
diamonds_price = summarize(diamonds_price, avg_price=price/carat)
diamonds_price = summarize(diamonds_price, avg_price=(price/carat))
diamonds_price = mutate(diamonds_price, avg_price=(price/carat))
diamonds_price = summarize(diamonds_price, mean(avg_price))
diamonds_price
diamonds_price = diamonds_best %>% group_by(cut) %>%  mutate(price_gram = price/carat) %>% summarize(avg_price = mean(price_gram))
diamonds_price
d<- ggplot(diamonds_price, aes(x=cut))
diamonds_bar = d + geom_bar()
diamonds_bar
d<- ggplot(diamonds_price, aes(x=cut, y = avg_price))
diamonds_bar = d + geom_bar()
diamonds_bar
d
diamonds_bar = d + geom_bar(aes(fill=cut))
diamonds_bar
d<- ggplot(diamonds_price, aes(x=cut))
diamonds_bar = d + geom_bar(aes(y = avg_price))
diamonds_bar
diamonds_bar = d + geom_bar(stat = "avg_price")
d<- ggplot(diamonds_price, aes(x=cut, y = avg_price))
diamonds_bar = d + geom_bar(stat = "identity")
diamonds_bar
?ggplot2::diamonds
g<- ggplot(data = diamonds, aes(x = x))
g + geom_histogram(binwidth = 1)
g<- ggplot(data = diamonds, aes(x = carat))
g + geom_histogram(binwidth = 1)
g + geom_histogram(binwidth = 0.5)
g + geom_histogram(binwidth = 0.1)
g + geom_histogram(binwidth = 0.15)
g + geom_histogram(binwidth = 0.25)
g + geom_histogram(binwidth = 0.1)
g + geom_histogram(binwidth = 0.01)
g<-ggplot(data=diamonds, aes( x = depth))
g + geom_histogram(binwidth = 0.2)
zoom<- coord_caresian(xlim = c(55,70))
zoom<- coord_cartesian(xlim = c(55,70))
g + geom_histogram(binwidth = 0.2) + zoom
g + geom_histogram(aes(fill = cut), binwidth = 0.2) + zoom
g + geom_histogram(aes(fill = cut), binwidth = 0.2) + facet_wrap(.~cut) + zoom
g + geom_histogram(binwidth = 0.2) + facet_wrap(.~cut) + zoom
g + geom_histogram(binwidth = 0.2) + facet_wrap(~cut) + zoom
g + geom_density(aes(color = cut)) + zoom
diamonds_bar
?ggplot2::density
?ggplot2::geom_density
str(faithful)
faithful = mutate(faithful, length = NA)
for (i in 1:nrow(faithful)){
if (faithful$eruptions[i]< 3.2){
faithful$length[i] = "short"
}
else{
faithful$length = "long"
}
}
head(faithful)
?faithful
faithful$eruptions[2]
faithful$eruptions[2] < 3.2
faithful = mutate(faithful, length = NA)
for (i in 1:nrow(faithful)){
if (faithful$eruptions[i] < 3.2){
faithful$length[i] = "short"
}
else{
faithful$length[i] = "long"
}
}
head(faithful)
f <- ggplot(data = faithful, aes(x = length, y = waiting))
f + geom_boxplot()
f + geom_boxplot(reorder("short", "long"))
f + geom_boxplot(reorder(waiting, value))
f <- ggplot(data = faithful, aes(x = reorder(length, -value), y = waiting))
f + geom_boxplot()
f <- ggplot(data = faithful, aes(x = reorder(length, waiting), y = waiting))
f + geom_boxplot()
f + geom_density()
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(color = length)
fa
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(color = "length")
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(color = faithful$length)
faithful = rename(faithful, LENGTH = length)
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(color = length)
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density()
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(length = color)
fa<- ggplot(data= faithful, aes(x = waiting))
fa + geom_density(color = LENGTH)
head(faithful)
faithful = rename(faithful, length = LENGTH)
fa<- ggplot(data= faithful, aes(x = waiting))
fa<- ggplot(data= faithful, aes(x = waiting, color = length))
fa + geom_density()
faithful = mutate(faithful, length = NA)
for (i in 1:nrow(faithful)){
if (faithful$eruptions[i] < 3.2){
faithful$length[i] = "short"
}
else{
faithful$length[i] = "long"
}
}
head(faithful)
f <- ggplot(data = faithful, aes(x = length, y = waiting))
f + geom_boxplot()
fa<- ggplot(data= faithful, aes(x = waiting, color = length))
fa + geom_density()
g<- ggplot(data=diamonds, aes(x = carat, y = price))
g + geom_point(aes(color = cut))
g + geom_bin2d
g + geom_bin2d()
g + geom_density2d()
g + geom_density2d() + geom_point()
g + geom_point() + geom_density2d()
g + geom_smooth(aes(color=cut))
g + geom_smooth(aes(color = cut), method= "lm", se = FALSE)
g + geom_smooth(aes(color = cut), method= "loess", se = FALSE)
g + geom_point(size = 0.5)
g + geom_point(alpha = 0.1)
g + geom_point(alpha = 0.1, size=0.5)
g<- ggplot(data = diamonds, aes(x = depth, color=cut))
g+ geom_density()
g<- ggplot(data = diamonds, aes(x = depth, fill=cut))
g+ geom_density()
g + geom_histogram
g + geom_histogram()
zoom<-coord_cartesian(xlim=c(55, 70))
g + geom_histogram() + zoom
g + geom_density() + zoom
g + geom_histogram() + zoom
g + geom_histogram(position="fill")
g + geom_histogram(position="fill") + zoom
apply(is.na(times), 1, sum)>0
times<-read.csv("TimesSquareSignage.csv")
load("~/NYCDSA/Project 1/Initial_map.RData")
nyc + geom_polygon(aes(group = group))
library(ggplot2)
nyc + geom_polygon(aes(group = group))
nyc + geom_polygon(aes(group = group, fill=color))
nyc + geom_polygon(aes(group = group)) + scale_color_brewer(palette="Blues")
?scale_color_brewer
nyc + geom_polygon(aes(group = group, fill=color)) + scale_color_brewer(palette="Blues")
nyc + geom_polygon(aes(group = group, fill=group)) + scale_color_brewer(palette="Blues")
nyc + geom_polygon(aes(group = group))
shiny::runApp('NYCDSA/Project 1/school_map')
??colorNumeric
library(dplyr)
shiny::runApp('NYCDSA/Project 1/school_map')
?leaflet::observe
runApp('NYCDSA/Project 1/school_map')
shiny::runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
View(address.test)
head(address.test[address.test$Income.Bucket==T])
head(address.test["" %in% address.test$Income.Bucket])
head(address.test["Quintile" %in% address.test$Income.Bucket])
head(address.test[address.test$Income.Bucket==T,])
head(address.test["Quintile" %in% address.test$Income.Bucket,])
head(address.test["" %in% address.test$Income.Bucket,])
?%in%
head(census.vital[census.vital])
head(census.vital[census.vital,])
head(census.vital[census.vital$Income.Bucket,])
View(census.vital)
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
switch("Highest Quintile", "Highest Quintile"=census.vital$Income.Bucket=="Highest Quintile",
"Second-Highest Quintile"=census.vital$Income.Bucket=="Second-Highest Quintile",
"Middle Quintile"=census.vital$Income.Bucket=="Middle Quintile",
"Second-Lowest Quintile"=census.vital$Income.Bucket=="Second-Lowest Quintile",
"Lowest Quintile"=census.vital$Income.Bucket=="Lowest Quintile",
"All"= census.vital$X>0)
census.vital[switch(input$income, "Highest Quintile"=census.vital$Income.Bucket=="Highest Quintile",
"Second-Highest Quintile"=census.vital$Income.Bucket=="Second-Highest Quintile",
"Middle Quintile"=census.vital$Income.Bucket=="Middle Quintile",
"Second-Lowest Quintile"=census.vital$Income.Bucket=="Second-Lowest Quintile",
"Lowest Quintile"=census.vital$Income.Bucket=="Lowest Quintile",
"All"= census.vital$X>0),]
census.vital[switch("Highest Quintile", "Highest Quintile"=census.vital$Income.Bucket=="Highest Quintile",
"Second-Highest Quintile"=census.vital$Income.Bucket=="Second-Highest Quintile",
"Middle Quintile"=census.vital$Income.Bucket=="Middle Quintile",
"Second-Lowest Quintile"=census.vital$Income.Bucket=="Second-Lowest Quintile",
"Lowest Quintile"=census.vital$Income.Bucket=="Lowest Quintile",
"All"= census.vital$X>0),]
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
View(address.temp)
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
head(select(address.temp, -Proficient.ELA, -ELAColor))
ncol(select(address.temp, -Proficient.ELA, -ELAColor))
copy_longlat = tract.longlat
address.temp<-address.test
nyc <- leaflet() %>%  addTiles() %>% setView(lng=-74, lat=40.7, zoom=11)
nyc.census<- nyc %>% addPolygons(data=copy_longlat, weight=1)
address.temp<-select(address.temp, -Proficient.ELA, -ELAColor)) %>% filter(Year==2016, Grade=="All Grades")
nyc.test<- nyc.census %>%
addCircleMarkers(lng=address.temp$long, lat=address.temp$lat, opacity=1, color = address.temp[,12], radius= 3, popup=paste(sep="<br/>", address.temp$School.Name, paste(address.temp[,9], "% Proficient"))) %>%
addLegend("bottomright", pal = pal, values = address.test$Proficient.ELA, na.label= 'Not Reported', title = paste("Percent Proficient, ", "2016"))
nyc.test
copy_longlat = tract.longlat
address.temp<-address.test
nyc <- leaflet() %>%  addTiles() %>% setView(lng=-74, lat=40.7, zoom=11)
nyc.census<- nyc %>% addPolygons(data=copy_longlat, weight=1)
address.temp<-select(address.temp, -Proficient.ELA, -ELAColor)) %>% filter(Year==2016, Grade=="All Grades")
nyc.test<- nyc.census %>%
addCircleMarkers(lng=address.temp$long, lat=address.temp$lat, opacity=1, color = address.temp[,12], radius= 3, popup=paste(sep="<br/>", address.temp$School.Name, paste(address.temp[,9], "% Proficient"))) %>%
addLegend("bottomright", pal = pal, values = address.test$Proficient.ELA, na.label= 'Not Reported', title = paste("Percent Proficient, ", "2016"))
nyc.test
copy_longlat = tract.longlat
address.temp<-address.test
nyc <- leaflet() %>%  addTiles() %>% setView(lng=-74, lat=40.7, zoom=11)
nyc.census<- nyc %>% addPolygons(data=copy_longlat, weight=1)
address.temp<-select(address.temp, -Proficient.ELA, -ELAColor) %>% filter(Year==2016, Grade=="All Grades")
nyc.test<- nyc.census %>%
addCircleMarkers(lng=address.temp$long, lat=address.temp$lat, opacity=1, color = address.temp[,12], radius= 3, popup=paste(sep="<br/>", address.temp$School.Name, paste(address.temp[,9], "% Proficient"))) %>%
addLegend("bottomright", pal = pal, values = address.test$Proficient.ELA, na.label= 'Not Reported', title = paste("Percent Proficient, ", "2016"))
nyc.test
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
head(address.temp[filter(address.temp, Year!=2016, Grade!=3, Income.Bucket!="Highest Quintile"),]$X)
head(address.temp[filter(address.temp, Year!=2016, Grade!=3),])
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
?leaflet::removeMarker
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
income.id<-filter(address.temp, Income.Bucket!="Highest Quintile")$X
head(income.id)
View(census.vital)
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
?leaflet::observe
?leaflet::observeEvent
?leaflet
?shiny::observe
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
income.id<-filter(census.vital, Income.Bucket!="Highest Quintile")$X
?leaflet::removeLayersControl
head(select(address.temp, switch("Mathematics","Mathematics"= list(-Proficient.ELA, -ELAColor), "English/Language Arts"=list(-Proficient.Math,-MathColor)))
)
1:10 %in% c(1,3,5,9)
"Hello" %in% ""
"" %in% "Hello"
"H" %in% "Hello"
head(address.test$Income.Bucket %in% c("Highest Quintile", "Lowest Quintile")
)
head(address.test$Income.Bucket %in% c("Highest Quintile")
)
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
?leaflet::addCircleMarkers
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.temp, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9 >=input$range[1] & 9<=input$range[2], Income.Bucket %in% input$income)
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.temp, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9 >0 & 9<=0, Income.Bucket %in% "Highest Quintile")
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.temp, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9>=0 & 9<=100 Income.Bucket %in% "Highest Quintile")
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.temp, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9 >0 & 9<=100, Income.Bucket %in% "Highest Quintile")
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9 >0 & 9<=100, Income.Bucket %in% "Highest Quintile")
View(address.test)
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.temp, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9>=0 & 9<=100, Income.Bucket %in% "Highest Quintile")
View(address.test)
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.test, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9>=0 & 9<=100, Income.Bucket %in% "Highest Quintile")
View(address.temp)
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.test, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", 9>=10 & 9<=100, Income.Bucket %in% "Highest Quintile")
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.test, -Proficient.ELA, -ELAColor))  %>%
filter(Year==2016, Grade=="All Grades", Income.Bucket %in% "Highest Quintile")
test.name<-names(address.temp)[c(9,12)]
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.test, -Proficient.ELA, -ELAColor))  %>% names()[9,12]<-c(Proficient, Color) %>%
filter(Year==2016, Grade=="All Grades", Income.Bucket %in% "Highest Quintile")
address.temp<-switch("Mathematics", "English/Language Arts"=select(address.test, -Proficient.Math, -MathColor), "Mathematics"=select(address.test, -Proficient.ELA, -ELAColor))  %>% names()[9,12]<-c("Proficient", "Color") %>%
filter(Year==2016, Grade=="All Grades", Income.Bucket %in% "Highest Quintile")
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
View(address.temp)
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
?dplyr::rename
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
head(address.temp %>% switch("Highest Quintile", "Highest Quintile"=filter(Income.Bucket=="Highest Quintile"), "Second-Highest Quintile"= filter(Income.Bucket=="Second-Highest Quintile"), "Middle Quintile"=filter(Income.Bucket=="Middle Quintile"), "Second-Lowest Quintile"=filter(Income.Bucket=="Second-Lowest Quintile"), "Lowest Quintile"=filter(Income.Bucket=="Lowest Quintile"), "All"=filter(Income.Bucket!=NA)))
?switch
head(switch("Highest Quintile", "Highest Quintile"=filter(., Income.Bucket=="Highest Quintile"), "Second-Highest Quintile"= filter(., Income.Bucket=="Second-Highest Quintile"), "Middle Quintile"=filter(., Income.Bucket=="Middle Quintile"), "Second-Lowest Quintile"=filter(., Income.Bucket=="Second-Lowest Quintile"), "Lowest Quintile"=filter(., Income.Bucket=="Lowest Quintile"), "All"=filter(., Income.Bucket!=NA)))
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
census.vital$X[census.vital$Income.Bucket=="Highest Quintile"]
census.vital$X==0
census.vital$X[census.vital$X==0)]
census.vital$X[census.vital$X==0]
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
census.vital$X[census.vital$Income.Bucket=="Second-Highest Quintile"]
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
runApp('NYCDSA/Project 1/davidletzler_schoolmap')
length(tract.longlat@data
)
setwd("C:/users/david/documents/nycdsa/Project 1/nyct2010_16d")
census.arc<-readOGR(".", "nyct2010")
tract.longlat <- spTransform(census.arc, CRS("+proj=longlat +datum=WGS84"))
length(tract.longlat@data)
length(tract.longlat@polygons)
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
?leaflet::removeShape
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
head(census.vital[census.vital$Income.Bucket=="Highest Quintile"])
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
head(census.vital[census.vital$Income.Bucket=="Highest Quintile",])
head(census.vital[census.vital$Income.Bucket=="Highest Quintile",])$X
head(as.character(1:length(tract.longlat@polygons)))
layer_id <- switch("Highest Quintile", "Highest Quintile"=census.vital[census.vital$Income.Bucket=="Highest Quintile",],
"Second-Highest Quintile"=census.vital[census.vital$Income.Bucket=="Second-Highest Quintile",],
"Middle Quintile"=census.vital[census.vital$Income.Bucket=="Middle Quintile",],
"Second-Lowest Quintile"=census.vital[census.vital$Income.Bucket=="Second-Lowest Quintile",],
"Lowest Quintile"=census.vital[census.vital$Income.Bucket=="Highest Quintile",],
"All"= census.vital[census.vital$X==0,])
head(layer_id$X)
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
runApp('~/NYCDSA/Project 1/davidletzler_schoolmap')
